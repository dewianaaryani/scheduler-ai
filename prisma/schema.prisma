// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String     @unique
  emailVerified DateTime?
  preferences   Json?
  image         String?
  accounts      Account[]
  sessions      Session[]
  goals         Goal[]
  schedules     Schedule[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Goal {
  id          String     @id @default(uuid())
  userId      String
  title       String
  description String
  targetDate  DateTime
  status      StatusGoal
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])
  steps       Step[]
}

enum StatusGoal {
  ACTIVE
  COMPLETED
  ABANDONED
}

model Step {
  id          String     @id @default(uuid())
  goalId      String
  title       String
  description String
  order       String
  status      StatusStep
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  goal        Goal       @relation(fields: [goalId], references: [id])
  schedules   Schedule[] // Menambahkan relasi ke Schedule
}

enum StatusStep {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

model Schedule {
  id          String         @id @default(uuid())
  userId      String
  stepId      String? // Nullable
  title       String
  description String
  startedTime DateTime
  endTime     DateTime
  recurrence  Recurrence
  status      StatusSchedule
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  user        User           @relation(fields: [userId], references: [id])
  step        Step?          @relation(fields: [stepId], references: [id])
  progresses  Progress[]
}

enum Recurrence {
  NONE
  DAILY
  WEEKLY
  MONTHLY
}

enum StatusSchedule {
  UPCOMING
  IN_PROGRESS
  COMPLETED
  MISSED
}

model Progress {
  id         String         @id @default(uuid())
  scheduleId String
  status     StatusProgress
  notes      String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  schedule   Schedule       @relation(fields: [scheduleId], references: [id])
}

enum StatusProgress {
  COMPLETED
  PARTIALLY_COMPLETED
  MISSED
}
