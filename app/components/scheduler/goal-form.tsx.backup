// components/goal/goal-form.tsx
"use client";

import { useState } from "react";
import { AIResponse, GoalFormData } from "@/app/lib/types";
import { processGoalDataStream } from "@/app/lib/goal-service-stream";
import { toast } from "sonner";

import InitialView from "./initial-view";
import GoalSuccess from "./goal-success";
import GoalSteps from "./goal-step";
import { useRouter } from "next/navigation";

interface GoalFormProps {
  username: string;
}

export default function GoalForm({ username }: GoalFormProps) {
  const router = useRouter();
  const [initialValue, setInitialValue] = useState("");
  const [currentFocus, setCurrentFocus] = useState<
    "initialValue" | "steps" | "complete"
  >("initialValue");
  const [aiResponse, setAiResponse] = useState<AIResponse | null>(null);
  const [processingAI, setProcessingAI] = useState(false);
  const [generatingSchedules, setGeneratingSchedules] = useState(false);
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const [aiProgress, setAiProgress] = useState<string>("");
  const [error, setError] = useState<string | null>(null);

  const handleInitialSubmit = (value: string) => {
    setInitialValue(value);
    setCurrentFocus("steps");
    sendGoalDataToAI({ initialValue: value });
  };

  const sendGoalDataToAI = async (data: Partial<GoalFormData>) => {
    if (processingAI) return;

    try {
      setProcessingAI(true);
      setError(null);
      setAiProgress("Menghubungi AI...");

      const response = await processGoalDataStream(
        data as GoalFormData,
        // Progress callback
        (message, progress) => {
          setAiProgress(message);
          if (progress) {
            console.log(`AI Progress: ${progress}%`);
          }
        },
        // Complete callback
        (response) => {
          setAiResponse(response);
          // If we got back a complete goal plan
          if (response.dataGoals) {
            setCurrentFocus("complete");
            toast.success("Tujuan berhasil dibuat!");
          }
        },
        // Error callback
        (error) => {
          setError(error);
          toast.error("Gagal memproses tujuan", {
            description: error,
          });
        }
      );

      if (response) {
        setAiResponse(response);
        if (response.dataGoals) {
          setCurrentFocus("complete");
        }
      }
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    } catch (err: any) {
      console.error("AI Processing Error:", err);
      setError(err.message || "Failed to process your goal");
      toast.error(err.message || "There was a problem processing your goal");
    } finally {
      setProcessingAI(false);
      setAiProgress("");
    }
  };

  const resetForm = () => {
    setInitialValue("");
    setCurrentFocus("initialValue");
    setAiResponse(null);
    setError(null);
  };
  const handleGenerateGoal = async () => {
    // Prevent duplicate submissions
    if (generatingSchedules) return;

    try {
      setGeneratingSchedules(true);

      // First, create the goal
      const response = await fetch("/api/ai/save-goal", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(aiResponse?.dataGoals),
      });
      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.message || "Failed to save data");
      }

      // All schedules are saved with the goal now
      toast.success("Tujuan dan jadwal berhasil dibuat!", {
        description: `${result.duration} jadwal telah dibuat`,
        duration: 2000,
      });

      router.push("/goals");
    } catch (error) {
      console.error("Error generating goal:", error);
      toast.error("Gagal menyimpan tujuan", {
        description:
          error instanceof Error ? error.message : "Terjadi kesalahan",
      });
    } finally {
      setGeneratingSchedules(false);
    }
  };

  if (currentFocus === "complete" && aiResponse?.dataGoals) {
    return (
      <GoalSuccess
        goal={aiResponse.dataGoals}
        onCreateAnother={resetForm}
        onGenerateGoal={handleGenerateGoal}
      />
    );
  }

  if (currentFocus === "initialValue") {
    return <InitialView username={username} onSubmit={handleInitialSubmit} />;
  }

  return (
    <GoalSteps
      initialValue={initialValue}
      aiResponse={aiResponse}
      processingAI={processingAI}
      error={error}
      onError={setError}
      onBack={() => setCurrentFocus("initialValue")}
      onSubmitData={sendGoalDataToAI}
      onProcessComplete={() => {
        if (aiResponse?.dataGoals) {
          setCurrentFocus("complete");
          toast("Tujuan Berhasil Dibuat!");
        }
      }}
    />
  );
}
